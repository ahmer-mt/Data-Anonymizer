version: "3.9"
services:
  ruuter:
    container_name: ruuter
    build:
      context: ./Ruuter/
      network: host
    volumes:
      - ./Ruuter/DSL:/DSL
    ports:
      - 8080:8080
    networks:
      - anonymizer

  resql:
    container_name: resql
    image: spring-boot
    build:
      context: ./Resql
      network: host
    ports:
      - "8082:8082"
    volumes:
      - ./Resql/:/src/app
    environment:
      - JDBC_URL=jdbc:postgresql://db:5432/ria-db
      - PING_ENDPOINT=http://localhost:8082/healthz
      - STARTUP_ENDPONT=http://localhost:8082/create_schema
    networks:
      - anonymizer

  db:
    container_name: db
    image: postgres
    restart: always
    environment:
      - POSTGRES_PASSWORD=pass
      - POSTGRES_USER=user
      - POSTGRES_DB=ria-db
    networks:
      - anonymizer

  label-studio-client:
    container_name: label-studio-client
    tty: true
    stdin_open: true
    build:
      dockerfile: Dockerfile
      context: ./Label-Studio
      network: host
    environment:
      - API_GATEWAY=http://locahost:8080
    volumes:
      - ./Label-Studio:/usr/src/app/my-app
      - /usr/src/app/my-app/node_modules
    ports:
      - "5000:5000"
    networks:
      - anonymizer

  data-management-client:
    container_name: data-management-client
    tty: true
    stdin_open: true
    build:
      dockerfile: Dockerfile
      context: ./dm
      network: host
    environment:
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_LABEL_STUDIO_URL=http://localhost:5000
    volumes:
      - ./dm:/usr/src/app/my-app
      - /usr/src/app/my-app/node_modules
    ports:
      - "8002:8002"
    networks:
      - anonymizer

  ml-service:
    container_name: ml-service
    image: ml-service
    build:
      context: ./ml-training-service/
      dockerfile: Dockerfile
      network: host
    restart: always
    env_file: ./ml-training-service/sample.env
    entrypoint: '/bin/sh -c "uvicorn main:app --host 0.0.0.0 --port $${API_PORT}"'
    volumes:
      - ./anonymisation_internal/anonymisation_api/anonymise/models:/models
    ports:
      - 8000:8000
    networks:
      - anonymizer

  redis:
    image: redis
    build:
      context: ./anonymisation_internal/anonymisation_api/redis/
      dockerfile: Dockerfile
      network: host
    ports:
      - 6378:6378
    networks:
      - anonymizer

  worker:
    image: worker
    build:
      context: ./anonymisation_internal/anonymisation_api/
      dockerfile: Dockerfile
      network: host
    depends_on:
      - redis
    volumes:
      - ./celery/logs:/app/logs
      - ./anonymisation_internal/anonymisation_api/anonymise/trained_model:/app/training/trained_model
      - ./anonymisation_internal/anonymisation_api/anonymise/models:/models
    networks:
      - anonymizer
  web:
    image: anonymise
    build:
      context: ./anonymisation_internal/anonymisation_api/anonymise/
      dockerfile: Dockerfile
      network: host
    depends_on:
      - redis
    ports:
      - 5001:5001
    volumes:
      - ./anonymisation_internal/anonymisation_api/anonymise/trained_model:/app/training/trained_model
      - ./anonymisation_internal/anonymisation_api/anonymise/logs:/app/logs
      - ./anonymisation_internal/anonymisation_api/anonymise/models:/models
    networks:
      - anonymizer


networks:
  anonymizer:
    name: anonymizer
    driver: bridge
    driver_opts:                         
       com.docker.network.driver.mtu: 1400
